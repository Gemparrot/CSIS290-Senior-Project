Use guards and all functions rather than one by one
If condition to check user role in the controller rather than sending the id to the service only in get request.


Your controller setup with JwtAuthGuard and role-based access control for admins looks good. Here’s how to test each endpoint in Postman:

Set Up Authentication in Postman:

Before testing each endpoint, ensure that you have a valid JWT for an admin user. Authenticate and retrieve the token, then include it in the request headers of each subsequent request as follows:
Go to the Headers tab in Postman and add:
Key: Authorization
Value: Bearer <your_token_here>
Testing Endpoints:

Make sure to include valid Authorization headers for all requests.
POST /team-members
Purpose: Create a new team member (admin only).
Request: POST http://<your_base_url>/team-members
Body (JSON):
json
Copy code
{
  "name": "John Doe"
}
Expected Response: The new team member's data, including an id.
GET /team-members
Purpose: Retrieve all team members (admin only).
Request: GET http://<your_base_url>/team-members
Expected Response: A list of team members.
GET /team-members/:id
Purpose: Retrieve a single team member by ID (admin only).
Request: GET http://<your_base_url>/team-members/1 (Replace 1 with the actual team member ID you want to fetch.)
Expected Response: The team member’s details with the specified ID.
PUT /team-members/:id
Purpose: Update a specific team member's details (admin only).
Request: PUT http://<your_base_url>/team-members/1 (Replace 1 with the team member ID).
Body (JSON):
json
Copy code
{
  "name": "Jane Doe"
}
Expected Response: The updated details of the team member.
DELETE /team-members/:id
Purpose: Delete a specific team member by ID (admin only).
Request: DELETE http://<your_base_url>/team-members/1 (Replace 1 with the team member ID).
Expected Response: Confirmation message or status indicating successful deletion.
Testing for Non-Admin Users:
Repeat the requests without an admin token or with a non-admin token to verify that they receive the UnauthorizedException with the message "Access restricted to admin users."
This should confirm that the access restrictions and CRUD functionality work correctly for the team-members endpoints.



import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import ambulanceService from '../services/ambulance';
import CreateAmbulance from '../components/ManageAmbualnce/CreateAmbualnce';
import { jwtDecode } from 'jwt-decode'; 

interface AmbulanceRegisterPayload {
  id?: number;
  vehicle_number: string;
  password: string;
  adminId: number;
}

interface DecodedToken {
  id: number; // Adjust field name based on the token structure
}

const ManageAmbulance: React.FC = () => {
  const [ambulances, setAmbulances] = useState<AmbulanceRegisterPayload[]>([]);
  const [isPopupOpen, setIsPopupOpen] = useState(false);
  const [adminId, setAdminId] = useState<number | null>(null);
  const navigate = useNavigate();

  // Decode token to extract admin ID
  const decodeToken = () => {
    const token = localStorage.getItem('token');
    if (!token) return null;
    try {
      const decoded: DecodedToken = jwtDecode(token);
      console.log("decode", decoded.id)
      return decoded.id;
    } catch (error) {
      console.error('Error decoding token:', error);
      return null;
    }
  };

  const fetchAmbulances = async () => {
    try {
      // Only fetch if adminId is valid
      if (adminId && !isNaN(adminId)) {
        const response = await ambulanceService.getAllAmbulances(adminId) as AmbulanceRegisterPayload[];
        setAmbulances(response);
      }
    } catch (error) {
      console.error('Error fetching ambulances:', error);
    }
  };

  useEffect(() => {
    const id = decodeToken();
    setAdminId(id);
    console.log("useeffect", id)

    if (id) fetchAmbulances();
  }, []);

  const handleCreateAmbulance = async (vehicleNumber: string, password: string) => {
    if (adminId === null) return;

    try {
      await ambulanceService.register({
        vehicle_number: vehicleNumber,
        password,
        adminId,
      });
      fetchAmbulances(); // Refresh the list
      setIsPopupOpen(false);
    } catch (error) {
      console.error('Error creating ambulance:', error);
    }
  };

  return (
    <div className="p-6 max-w-6xl mx-auto">
      <h1 className="text-2xl font-bold mb-6">Manage Ambulances</h1>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-lg font-medium">Ambulances</h2>
        <button
          onClick={() => setIsPopupOpen(true)}
          className="flex items-center px-4 py-2 bg-indigo-600 text-white rounded shadow hover:bg-indigo-700"
        >
          <svg
            className="w-5 h-5 mr-2"
            fill="none"
            stroke="currentColor"
            viewBox="0 0 24 24"
          >
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth="2"
              d="M12 4v16m8-8H4"
            />
          </svg>
          Create Ambulance
        </button>
      </div>
      {ambulances.length > 0 ? (
        <ul className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6">
          {ambulances.map((ambulance) => (
            <li
              key={ambulance.id}
              onClick={() => navigate(`/ambulance/${ambulance.id}/details`)}
              className="p-4 bg-white rounded shadow hover:shadow-lg cursor-pointer"
            >
              <h3 className="text-lg font-medium">{ambulance.vehicle_number}</h3>
              <p className="text-sm text-gray-500">ID: {ambulance.id}</p>
            </li>
          ))}
        </ul>
      ) : (
        <p className="text-center text-gray-500">No ambulances found</p>
      )}

      {isPopupOpen && (
        <CreateAmbulance
          onClose={() => setIsPopupOpen(false)}
          onSubmit={handleCreateAmbulance}
        />
      )}
    </div>
  );
};

export default ManageAmbulance;


